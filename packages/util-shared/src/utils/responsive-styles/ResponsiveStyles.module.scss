@use "sass:map";

$mobile: 375px;
$tablet: 768px;
$desktop: 1024px;
$all: all;

$breakpoints: $mobile, $tablet, $desktop, $all;

$mobile-name: mobile;
$tablet-name: tablet;
$desktop-name: desktop;
$all-name: all;

@mixin breakpoint($point) {
  // 767px and less
  @if $point == $mobile-name {
    @media all and (max-width: $tablet - 0.5px) {
      #{if(&, "&", "*")}:not(:root) {
        @content;
      }
    }
  }

  // Between 768px and 1279px
  @else if $point == $tablet-name {
    @media all and (min-width: $tablet) and (max-width: $desktop - 0.5px) {
      #{if(&, "&", "*")}:not(:root) {
        @content;
      }
    }
  }

  // 1280px and more
  @else if $point == $desktop-name {
    @media all and (min-width: $desktop) {
      #{if(&, "&", "*")}:not(:root) {
        @content;
      }
    }
  }
}




$space-properties: gap, row-gap, column-gap, margin, margin-left, margin-right,
  margin-top, margin-bottom, padding, padding-left, padding-right, padding-top,
  padding-bottom, border-radius;

$small: 4px;
$medium: 8px;
$large: 16px;

$space-values: $small, $medium, $large;

$space-names: (
  $small: small,
  $medium: medium,
  $large: large,
);

@each $property in $space-properties {
  @each $space in $space-values {
    @each $breakpoint in $breakpoints {
      .#{$property}-#{map.get($space-names, $space)}-#{$breakpoint} {
        #{$property}: $space;
      }
    }
  }
}

$flex-directions: row, column;

@each $direction in $flex-directions {
  @each $breakpoint in $breakpoints {
    .flex-direction-#{$direction}-#{$breakpoint} {
      flex-direction: $direction;
    }
  }
}

$flex-wraps: nowrap, wrap, wrap-reverse;

@each $wrap in $flex-wraps {
  @each $breakpoint in $breakpoints {
    .flex-wrap-#{$wrap}-#{$breakpoint} {
      flex-wrap: $wrap;
    }
  }
}

$flex-align-properties: align-items, align-self;
$flex-align-values: stretch, flex-start, center, flex-end, baseline;

@each $property in $flex-align-properties {
  @each $align in $flex-align-values {
    @each $breakpoint in $breakpoints {
      .#{$property}-#{$align}-#{$breakpoint} {
        #{$property}: $align;
      }
    }
  }
}

$flex-align-content-values: flex-start, center, flex-end, space-between, space-around;

@each $align in $flex-align-content-values {
  @each $breakpoint in $breakpoints {
    .align-content-#{$align}-#{$breakpoint} {
      align-content: $align;
    }
  }
}

$shadow-elevation-high: 0px 4px 8px 0px rgba(0, 0, 0, 0.2);
$shadow-elevation-normal: 0px 2px 4px 0px rgba(0, 0, 0, 0.2);
$shadow-elevation-low: 0px 1px 2px 0px rgba(0, 0, 0, 0.2);

$shadow-values: $shadow-elevation-high, $shadow-elevation-normal,
  $shadow-elevation-low;

$shadow-names: (
  $shadow-elevation-high: shadow-elevation-high,
  $shadow-elevation-normal: shadow-elevation-normal,
  $shadow-elevation-low: shadow-elevation-low,
);

@each $shadow in $shadow-values {
  @each $breakpoint in $breakpoints {
    .shadow-#{map.get($shadow-names, $shadow)}-#{$breakpoint} {
      box-shadow: $shadow;
    }
  }
}


$flex-justify-content-values: flex-start, center, flex-end, space-between, space-around, space-evenly;

@each $justify in $flex-justify-content-values {
  @each $breakpoint in $breakpoints {
    .justify-content-#{$justify}-#{$breakpoint} {
      justify-content: $justify;
    }
  }
}

$flex-max-value: 11;

@for $flex-value from 0 through $flex-max-value {
  @each $breakpoint in $breakpoints {
    .flex-grow-#{$flex-value}-#{$breakpoint} {
      @include breakpoint($breakpoint) {
        flex-grow: $flex-value;
      }
    }
  }

  @each $breakpoint in $breakpoints {
    .flex-shrink-#{$flex-value}-#{$breakpoint} {
      @include breakpoint($breakpoint) {
        flex-shrink: $flex-value;
      }
    }
  }
}

$text-align-values: left, center, right, justify;

@each $align in $text-align-values {
  @each $breakpoint in $breakpoints {
    .text-align-#{$align}-#{$breakpoint} {
      text-align: $align;
    }
  }
}